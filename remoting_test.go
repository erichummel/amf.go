
package amf

import (
    "bytes"
    "encoding/hex"
    "os"
    "testing"
)

func decodeMessageBundleFromHex(s string) (*MessageBundle, os.Error) {
	requestBinary, _ := hex.DecodeString(s)
    reader := bytes.NewBuffer(requestBinary)

	return DecodeMessageBundle(reader)
}

func TestDecodeExampleRequest(t *testing.T) {

    // Bits for an example request, generated by the Pinta tool:
    const exampleRequest = "00030000000100046e756c6c00022f37000001090a0000000"+
        "1110a81134f666c65782e6d6573736167696e672e6d657373616765732e52656d6f7"+
        "4696e674d6573736167650d736f75726365136f7065726174696f6e136d657373616"+
        "765496411636c69656e7449641574696d65546f4c6976650f6865616465727313746"+
        "96d657374616d7009626f64791764657374696e6174696f6e060f736572766963650"+
        "60d6d6574686f64064936353732364339332d393243322d443132452d444637392d3"+
        "14330343138453135363944064939646534396137642d333736372d343264362d613"+
        "537652d32313137373263646633306404000a0b01154453456e64706f696e7401094"+
        "453496406076e696c010400090101060d616d66706870"

    bundle, err := decodeMessageBundleFromHex(exampleRequest)

    if err != nil {
        t.Errorf("DecodeMessageBundle returned error: %v", err)
        return
    }

    if bundle.AmfVersion != 3 {
        t.Errorf("Wrong amfVersion: %d", bundle.AmfVersion)
    }
    if len(bundle.Headers) != 0 {
        t.Errorf("Wrong number of headers: %d", len(bundle.Headers))
    }
    if len(bundle.Messages) != 1 {
        t.Errorf("Wrong number of messages: %d", len(bundle.Messages))
        return
    }

    message := bundle.Messages[0]
    if message.TargetUri != "null" {
        t.Errorf("Wrong target uri: %s", message.TargetUri)
    }
    if message.ResponseUri != "/7" {
        t.Errorf("Wrong response uri: %s", message.ResponseUri)
    }

    bodyArray,ok := message.Body.([]interface{})

    if !ok {
        t.Errorf("Couldn't cast to array: %v\n", message.Body)
        return
    }

    frm,ok := bodyArray[0].(FlexRemotingMessage)

    if !ok {
        t.Errorf("Couldn't cast to FlexRemotingMessage: %v\n", bodyArray[0])
        return
    }

    if frm.Timestamp != 0 {
        t.Error("Wrong timestamp")
    }
    if frm.TimeToLive != 0 {
        t.Error("Wrong timeToLive")
    }
    if frm.Source != "service" {
        t.Error("Wrong source")
    }
    if frm.Operation != "method" {
        t.Error("Wrong operation")
    }
    if frm.MessageId != "65726C93-92C2-D12E-DF79-1C0418E1569D" {
        t.Error("Wrong timestamp")
    }
    if frm.ClientId != "9de49a7d-3767-42d6-a57e-211772cdf30d" {
        t.Error("Wrong timestamp")
    }
    if frm.Destination != "amfphp" {
        t.Error("Wrong destination")
    }
}
